#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Configure couchpotato/transmission"""

import sys
import json
import logging
import sqlite3
import xml.etree.ElementTree as ET
from configparser import ConfigParser
import logging
from pathlib import Path
from argparse import ArgumentParser

_LOGGING_FMT_ = '%(asctime)s %(levelname)-8s %(message)s'


class JsonConfig:
    def __init__(self, path: Path):
        self.path = path

    def update(self, data):
        config = self.config
        config.update(data)
        self.config = config
        return config

    def __getitem__(self, name):
        return self.config.get(name)

    @property
    def config(self) -> dict:
        logging.info('Reading json config %s', self.path)
        try:
            with self.path.open() as stream:
                return json.load(stream)
        except Exception as error:
            logging.warning('Could not load %s config: %s', self.path, error)
            return {}

    @config.setter
    def config(self, data):
        logging.info('Writing json config %s', self.path)
        with self.path.open('w') as stream:
            return json.dump(data, stream)


class Jackett:
    def __init__(self, base: Path):
        self.base = base

    def init(self, options):
        self.config.update({
            'BlackholeDir': options['torrents-dir'],
            'BasePathOverride': '/jackett',
        })

    @property
    def config(self) -> JsonConfig:
        return JsonConfig(self.base / 'Jackett' / 'ServerConfig.json')


class Transmission:
    def __init__(self, base: Path):
        self.base = base

    def init(self, options):
        self.config.update({
            'download-dir': options['download-dir'],
            'download-queue-size': options['transmission-download-queue-size'],
            'incomplete-dir-enabled': True,
            'incomplete-dir': options['incomplete-dir'],
            'peer-port-random-low': 50001,
            'rpc-authentication-required': True,
            'rpc-bind-address': '0.0.0.0',
            'rpc-enabled': True,
            'rpc-host-whitelist': '*.*.*.*',
            'rpc-host-whitelist-enabled': False,
            'rpc-password': options['password'],
            'rpc-port': 9091,
            'rpc-username': options['username'],
            'rpc-whitelist': '*.*.*.*',
            'rpc-whitelist-enabled': False,
            'watch-dir-enabled': True,
            'watch-dir': options['torrents-dir'],
        })

    @property
    def config(self) -> Path:
        return JsonConfig(self.base / 'settings.json')


class Radarr:
    def __init__(self, base: Path, jackett: Jackett):
        self.base = base
        self.jackett = jackett
        self._db = None

    def init(self, options):
        self.set_url_base(options)
        self.set_indexer(options)
        self.set_downloader(options)
        self.set_root_folder(options)

    @property
    def config_path(self) -> Path:
        return self.base / 'config.xml'

    @property
    def db_path(self) -> Path:
        return self.base / 'nzbdrone.db'

    @property
    def db(self):
        if self._db is None:
            self._db = sqlite3.connect(str(self.db_path))
        return self._db

    def set_url_base(self, options):
        if self.config_path.exists():
            tree = ET.parse(str(self.config_path))
        else:
            tree = ET.fromstring('<Config><UrlBase/></Config>')
        tree.find('UrlBase').text = '/radarr'
        tree.write(str(self.config_path))

    def insert_or_update(self, table, name, data, key='Name'):
        fields = tuple(data)
        values = tuple(data[f] for f in fields)

        results = self.db.execute(
            'SELECT Id FROM {} WHERE {}= ?'.format(table, key),
            (name,)
        ).fetchone()
        if results:
            logging.info('Updating %s configuration in radarr', name)

            self.db.execute(
                'UPDATE {} '.format(table) +
                'SET {} '.format(','.join(f + '=?' for f in fields)) +
                'WHERE Id = {}'.format(results[0]),
                values
            )
        else:
            logging.info('Setting %s configuration in radarr', name)
            self.db.execute(
                'INSERT INTO {} ({})'.format(table, ','.join(fields)) +
                'VALUES ({})'.format(','.join('?' * len(fields))),
                values
            )
        self.db.commit()

    def set_indexer(self, options):
        table = 'Indexers'
        name = 'Jackett'
        settings = {
            "minimumSeeders": 1,
            "requiredFlags": [],
            "baseUrl": "http://jackett:9117/jackett"
            "/api/v2.0/indexers/all/results/torznab/",
            "multiLanguages": [],
            "apiKey": self.jackett.config['APIKey'],
            "categories": [2000, 2010, 2020, 2030,
                           2035, 2040, 2045, 2050, 2060],
            "animeCategories": [],
            "removeYear": False,
            "searchByTitle": False
        }
        data = {
            'Name': name,
            'Implementation': 'Torznab',
            'Settings': json.dumps(settings, indent=2),
            'ConfigContract': 'TorznabSettings',
            'EnableRss': 1,
            'EnableSearch': 1
        }
        self.insert_or_update(table, name, data)

    def set_downloader(self, options):
        table = 'DownloadClients'
        name = 'transmission'
        settings = {
            'host': 'transmission',
            'port': 9091,
            'urlBase': '/transmission/',
            'username': options['username'],
            'password': options['password'],
            'movieCategory': 'radarr',
            'recentMoviePriority': 0,
            'oldMoviePriority': 0,
            'addPaused': False,
            'useSsl': False,
        }
        data = {
            'Enable': 1,
            'Name': name,
            'Implementation': 'Transmission',
            'Settings': json.dumps(settings, indent=2),
            'ConfigContract': 'TransmissionSettings'
        }
        self.insert_or_update(table, name, data)

    def set_config(self, options):
        table = 'Config'
        key = 'Key'
        name = 'enablecompleteddownloadhandling'
        data = {
            'Key': name,
            'Value': True
        }
        self.insert_or_update(table, name, data, key=key)

    def set_root_folder(self, options):
        table = 'RootFolders'
        key = 'Path'
        name = options['movies-dir']
        data = {key: name}
        self.insert_or_update(table, name, data, key=key)

    def set_naming(self, options):
        table = 'NamingConfig'
        key = 'Id'
        name = 1
        data = {
            'MultiEpisodeStyle': 0,
            'RenameEpisodes': 1,
            'ReplaceIllegalCharacters': 1,
            'StandardMovieFormat': '{Movie Title} - {Release Year} - ',
            'MovieFolderFormat': '{Movie Title} ({Release Year})',
            'ColonReplacementFormat': 0,
        }
        self.insert_or_update(table, name, data, key=key)


def get_couchpotato_config(base: Path) -> Path:
    return base / 'couchpotato' / 'config' / 'CouchPotato.cfg'


def configure_couchpotato(base, options):
    config_path = get_couchpotato_config(base)
    config = ConfigParser()
    config.read(str(config_path))

    sections = (
        'core',  'transmission', 'torrentz', 'yts',
        'kickasstorrents', 'thepiratebay'
    )
    for section in sections:
        if section not in config:
            config[section] = {}

    config['core']['username'] = options['username']
    config['core']['url_base'] = '/couchpotato'
    config['transmission']['enabled'] = '1'
    config['transmission']['host'] = options['transmission-host']
    config['transmission']['directory'] = options['download-dir']
    config['transmission']['username'] = options['username']
    config['transmission']['password'] = options['password']

    config['torrentz']['enabled'] = 'True'
    config['torrentz']['seed_time'] = '40'
    config['torrentz']['seed_ratio'] = '1'

    config['yts']['enabled'] = 'True'
    config['yts']['seed_time'] = '40'
    config['yts']['seed_ratio'] = '1'

    config['kickasstorrents']['enabled'] = 'True'
    config['kickasstorrents']['only_verified'] = 'False'
    config['kickasstorrents']['seed_time'] = '40'
    config['kickasstorrents']['seed_ratio'] = '1'

    config['thepiratebay']['enabled'] = 'True'
    config['thepiratebay']['trusted_only'] = 'False'
    config['thepiratebay']['seed_time'] = '40'
    config['thepiratebay']['seed_ratio'] = '1'

    with config_path.open('w') as stream:
        config.write(stream)


def parse_options(base: Path) -> dict:
    config_path = base / '.env'
    with config_path.open() as stream:
        config_text = stream.read()

    parser = ConfigParser()
    parser.read_string('[config]' + config_text)
    options = {k.replace('_', '-'): v for k,v in parser.items('config')}
    options.update({
        'radarr-config': Path(options['radarr-config']),
        'jackett-config': Path(options['jackett-config']),
        'transmission-config': Path(options['transmission-config']),
        'transmission-host': 'http://transmission:9091',
        'aransmission-peer-port-random-low': 50001,
        'transmission-download-queue-size': 5,
        # Container internal paths
        'movies-dir': '/media/movies',
        'download-dir': '/media/downloads/completed',
        'torrents-dir': '/media/downloads/torrents',
        'incomplete-dir': '/media/downloads/incomplete',
    })

    return options


def error(msg, is_exit=True):
    logging.error(msg)
    if is_exit:
        sys.exit()


def parse_args():
    parser = ArgumentParser(usage="%(prog)s [options] ARG ARG")

    parser.add_argument(
        "-d", "--dir", default=".",  type=Path,
        metavar='DIR', help="Path to project root",
    )
    parser.add_argument(
        "-v", "--verbose", dest="verbose", action="count", default=0, help=""
    )

    args = parser.parse_args()

    # Validate and convert args
    args.dir = args.dir.absolute().resolve()
    if not args.dir.is_dir():
        error('--dir must be a DIR')

    # Configure logging
    logging_levels = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}
    level = logging_levels[args.verbose if args.verbose < 3 else 2]
    logging.basicConfig(level=level, format=_LOGGING_FMT_)

    return args


def main():
    args = parse_args()
    options = parse_options(args.dir)

    transmission = Transmission(options['transmission-config'])
    transmission.init(options)

    jackett = Jackett(options['jackett-config'])
    jackett.init(options)

    radarr = Radarr(options['radarr-config'], jackett=jackett)
    radarr.init(options)


if __name__ == "__main__":
    main()
